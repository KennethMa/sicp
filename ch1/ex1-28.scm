(define (nontrivial-square-root? a n)
  (cond ((= a 1) #f)
        ((= a (- n 1)) #f)
        (else (= 1 (remainder (square a) n)))))

(define (expmod base exp m)
  (cond ((nontrivial-square-root? base m) 0)
        ((= exp 0) 1)
        ((even? exp)
          (remainder (square (expmod base (/ exp 2) m))
                      m))
        (else
          (remainder (* base (expmod base (- exp 1) m))
                      m))))

(define (less-than-param-random n)
  (let ((r (random n)))
    (if (= r 0)
      (less-than-param-random n)
      r)))

(define (miller-rabin-test n)
  (define (m-r-iter n times)
    (cond ((= times 0) #t)
          ((= 1 (expmod (less-than-param-random n) (- n 1) n))
            (m-r-iter n (- times 1)))
          (else #f)))
  (let ((times (ceiling (/ n 2))))
    (m-r-iter n times)))
